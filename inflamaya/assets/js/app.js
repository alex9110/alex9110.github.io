$(document).ready(function () {

  var wnWidth = $(window).width();
  var x = (wnWidth > 999)? false:true;

  var slLider = $('.reviews-list');
  $(window).on('resize', function(){
    wnWidth = $(window).width();
    if (wnWidth<1000 && x===false) { //если екран меньше 1000 и слайдер еще не был иницыализирова то инициализируем его
      x = true;
      sliderInit(x);
    };
    if(wnWidth>999 ){ //если слайдер был уничтожен то создадим условия что бы при ресайзе он мог собраться
      x = false;
    }
  });

 function sliderInit(x){
  if (x) {
     slLider.slick({
       autoplay: true,
       speed: 2000,
       slidesToShow: 1,
       variableWidth: false,
       autoplaySpeed: 5000, 
       arrows: false,
       dots: true,
       responsive: [
         {
           breakpoint: 5000,
           settings: "unslick"
         },
         {
           breakpoint: 999,
           settings: {
             slidesToShow: 1,

           }
         },
       ]
     });
    }
  }
  
 sliderInit(x);

});




//# sourceMappingURL=data:application/json;charset=utf8;base64,
